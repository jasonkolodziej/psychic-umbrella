// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { LegoColorsListData, LegoColorsListError, LegoColorsListResponse, LegoColorsReadData, LegoColorsReadError, LegoColorsReadResponse, LegoElementsReadData, LegoElementsReadError, LegoElementsReadResponse, LegoMinifigsListData, LegoMinifigsListError, LegoMinifigsListResponse, LegoMinifigsReadData, LegoMinifigsReadError, LegoMinifigsReadResponse, LegoMinifigsPartsListData, LegoMinifigsPartsListError, LegoMinifigsPartsListResponse, LegoMinifigsSetsListData, LegoMinifigsSetsListError, LegoMinifigsSetsListResponse, LegoPartCategoriesListData, LegoPartCategoriesListError, LegoPartCategoriesListResponse, LegoPartCategoriesReadData, LegoPartCategoriesReadError, LegoPartCategoriesReadResponse, LegoPartsListData, LegoPartsListError, LegoPartsListResponse, LegoPartsReadData, LegoPartsReadError, LegoPartsReadResponse, LegoPartsColorsListData, LegoPartsColorsListError, LegoPartsColorsListResponse, LegoPartsColorsReadData, LegoPartsColorsReadError, LegoPartsColorsReadResponse, LegoPartsColorsSetsListData, LegoPartsColorsSetsListError, LegoPartsColorsSetsListResponse, LegoSetsListData, LegoSetsListError, LegoSetsListResponse, LegoSetsReadData, LegoSetsReadError, LegoSetsReadResponse, LegoSetsAlternatesListData, LegoSetsAlternatesListError, LegoSetsAlternatesListResponse, LegoSetsMinifigsListData, LegoSetsMinifigsListError, LegoSetsMinifigsListResponse, LegoSetsPartsListData, LegoSetsPartsListError, LegoSetsPartsListResponse, LegoSetsSetsListData, LegoSetsSetsListError, LegoSetsSetsListResponse, LegoThemesListData, LegoThemesListError, LegoThemesListResponse, LegoThemesReadData, LegoThemesReadError, LegoThemesReadResponse, SwaggerListError, SwaggerListResponse, UsersTokenCreateData, UsersTokenCreateError, UsersTokenCreateResponse, UsersBadgesListData, UsersBadgesListError, UsersBadgesListResponse, UsersBadgesReadData, UsersBadgesReadError, UsersBadgesReadResponse, UsersAllpartsListData, UsersAllpartsListError, UsersAllpartsListResponse, UsersBuildReadData, UsersBuildReadError, UsersBuildReadResponse, UsersLostPartsListData, UsersLostPartsListError, UsersLostPartsListResponse, UsersLostPartsCreateData, UsersLostPartsCreateError, UsersLostPartsCreateResponse, UsersLostPartsDeleteData, UsersLostPartsDeleteError, UsersLostPartsDeleteResponse, UsersMinifigsListData, UsersMinifigsListError, UsersMinifigsListResponse, UsersPartlistsListData, UsersPartlistsListError, UsersPartlistsListResponse, UsersPartlistsCreateData, UsersPartlistsCreateError, UsersPartlistsCreateResponse, UsersPartlistsReadData, UsersPartlistsReadError, UsersPartlistsReadResponse, UsersPartlistsUpdateData, UsersPartlistsUpdateError, UsersPartlistsUpdateResponse, UsersPartlistsPartialUpdateData, UsersPartlistsPartialUpdateError, UsersPartlistsPartialUpdateResponse, UsersPartlistsDeleteData, UsersPartlistsDeleteError, UsersPartlistsDeleteResponse, UsersPartlistsPartsListData, UsersPartlistsPartsListError, UsersPartlistsPartsListResponse, UsersPartlistsPartsCreateData, UsersPartlistsPartsCreateError, UsersPartlistsPartsCreateResponse, UsersPartlistsPartsReadData, UsersPartlistsPartsReadError, UsersPartlistsPartsReadResponse, UsersPartlistsPartsUpdateData, UsersPartlistsPartsUpdateError, UsersPartlistsPartsUpdateResponse, UsersPartlistsPartsDeleteData, UsersPartlistsPartsDeleteError, UsersPartlistsPartsDeleteResponse, UsersPartsListData, UsersPartsListError, UsersPartsListResponse, UsersProfileReadData, UsersProfileReadError, UsersProfileReadResponse, UsersSetlistsListData, UsersSetlistsListError, UsersSetlistsListResponse, UsersSetlistsCreateData, UsersSetlistsCreateError, UsersSetlistsCreateResponse, UsersSetlistsReadData, UsersSetlistsReadError, UsersSetlistsReadResponse, UsersSetlistsUpdateData, UsersSetlistsUpdateError, UsersSetlistsUpdateResponse, UsersSetlistsPartialUpdateData, UsersSetlistsPartialUpdateError, UsersSetlistsPartialUpdateResponse, UsersSetlistsDeleteData, UsersSetlistsDeleteError, UsersSetlistsDeleteResponse, UsersSetlistsSetsListData, UsersSetlistsSetsListError, UsersSetlistsSetsListResponse, UsersSetlistsSetsCreateData, UsersSetlistsSetsCreateError, UsersSetlistsSetsCreateResponse, UsersSetlistsSetsReadData, UsersSetlistsSetsReadError, UsersSetlistsSetsReadResponse, UsersSetlistsSetsUpdateData, UsersSetlistsSetsUpdateError, UsersSetlistsSetsUpdateResponse, UsersSetlistsSetsPartialUpdateData, UsersSetlistsSetsPartialUpdateError, UsersSetlistsSetsPartialUpdateResponse, UsersSetlistsSetsDeleteData, UsersSetlistsSetsDeleteError, UsersSetlistsSetsDeleteResponse, UsersSetsListData, UsersSetsListError, UsersSetsListResponse, UsersSetsCreateData, UsersSetsCreateError, UsersSetsCreateResponse, UsersSetsSyncCreateData, UsersSetsSyncCreateError, UsersSetsSyncCreateResponse, UsersSetsReadData, UsersSetsReadError, UsersSetsReadResponse, UsersSetsUpdateData, UsersSetsUpdateError, UsersSetsUpdateResponse, UsersSetsDeleteData, UsersSetsDeleteError, UsersSetsDeleteResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get a list of all Colors.
 * Get a list of all Colors.
 */
export const legoColorsList = <ThrowOnError extends boolean = false>(options?: Options<LegoColorsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoColorsListResponse, LegoColorsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/colors/'
}); };

/**
 * Get details about a specific Color.
 * Get details about a specific Color.
 */
export const legoColorsRead = <ThrowOnError extends boolean = false>(options: Options<LegoColorsReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoColorsReadResponse, LegoColorsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/colors/{id}/'
}); };

/**
 * Get details about a specific Element ID.
 * Get details about a specific Element ID.
 */
export const legoElementsRead = <ThrowOnError extends boolean = false>(options: Options<LegoElementsReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoElementsReadResponse, LegoElementsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/elements/{element_id}/'
}); };

/**
 * Get a list of Minifigs.
 * Get a list of Minifigs.
 */
export const legoMinifigsList = <ThrowOnError extends boolean = false>(options?: Options<LegoMinifigsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoMinifigsListResponse, LegoMinifigsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/minifigs/'
}); };

/**
 * Get details for a specific Minifig.
 * Get details for a specific Minifig.
 */
export const legoMinifigsRead = <ThrowOnError extends boolean = false>(options: Options<LegoMinifigsReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoMinifigsReadResponse, LegoMinifigsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/minifigs/{set_num}/'
}); };

/**
 * Get a list of all Inventory Parts in this Minifig.
 * Get a list of all Inventory Parts in this Minifig.
 *
 * Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
 */
export const legoMinifigsPartsList = <ThrowOnError extends boolean = false>(options: Options<LegoMinifigsPartsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoMinifigsPartsListResponse, LegoMinifigsPartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/minifigs/{set_num}/parts/'
}); };

/**
 * Get a list of Sets a Minifig has appeared in.
 * Get a list of Sets a Minifig has appeared in.
 */
export const legoMinifigsSetsList = <ThrowOnError extends boolean = false>(options: Options<LegoMinifigsSetsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoMinifigsSetsListResponse, LegoMinifigsSetsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/minifigs/{set_num}/sets/'
}); };

/**
 * Get a list of all Part Categories.
 * Get a list of all Part Categories.
 */
export const legoPartCategoriesList = <ThrowOnError extends boolean = false>(options?: Options<LegoPartCategoriesListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartCategoriesListResponse, LegoPartCategoriesListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/part_categories/'
}); };

/**
 * Get details about a specific Part Category.
 * Get details about a specific Part Category.
 */
export const legoPartCategoriesRead = <ThrowOnError extends boolean = false>(options: Options<LegoPartCategoriesReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartCategoriesReadResponse, LegoPartCategoriesReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/part_categories/{id}/'
}); };

/**
 * Get a list of Parts.
 * Get a list of Parts.
 *
 * Optional parameter inc_part_details=1 can be used to return additional fields, the same as for a single part lookup.
 *
 * The optional part_nums filter parameter should be a comma separated list of part_num without spaces.
 *
 * Optionally filter by one or more of the below query parameters.
 */
export const legoPartsList = <ThrowOnError extends boolean = false>(options?: Options<LegoPartsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartsListResponse, LegoPartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/parts/'
}); };

/**
 * Get details about a specific Part.
 * Get details about a specific Part.
 */
export const legoPartsRead = <ThrowOnError extends boolean = false>(options: Options<LegoPartsReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartsReadResponse, LegoPartsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/parts/{part_num}/'
}); };

/**
 * Get a list of all Colors a Part has appeared in.
 * Get a list of all Colors a Part has appeared in.
 */
export const legoPartsColorsList = <ThrowOnError extends boolean = false>(options: Options<LegoPartsColorsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartsColorsListResponse, LegoPartsColorsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/parts/{part_num}/colors/'
}); };

/**
 * Get details about a specific Part/Color combination.
 * Get details about a specific Part/Color combination.
 */
export const legoPartsColorsRead = <ThrowOnError extends boolean = false>(options: Options<LegoPartsColorsReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartsColorsReadResponse, LegoPartsColorsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/parts/{part_num}/colors/{color_id}/'
}); };

/**
 * Get a list of all Sets the Part/Color combination has appeard in.
 * Get a list of all Sets the Part/Color combination has appeard in.
 */
export const legoPartsColorsSetsList = <ThrowOnError extends boolean = false>(options: Options<LegoPartsColorsSetsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoPartsColorsSetsListResponse, LegoPartsColorsSetsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/parts/{part_num}/colors/{color_id}/sets/'
}); };

/**
 * Get a list of Sets, optionally filtered by any of the below parameters.
 * Get a list of Sets, optionally filtered by any of the below parameters.
 */
export const legoSetsList = <ThrowOnError extends boolean = false>(options?: Options<LegoSetsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoSetsListResponse, LegoSetsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/sets/'
}); };

/**
 * Get details for a specific Set.
 * Get details for a specific Set.
 */
export const legoSetsRead = <ThrowOnError extends boolean = false>(options: Options<LegoSetsReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoSetsReadResponse, LegoSetsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/sets/{set_num}/'
}); };

/**
 * Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can
 * Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can
 * be found in the Set.
 */
export const legoSetsAlternatesList = <ThrowOnError extends boolean = false>(options: Options<LegoSetsAlternatesListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoSetsAlternatesListResponse, LegoSetsAlternatesListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/sets/{set_num}/alternates/'
}); };

/**
 * Get a list of all Inventory Minifigs in this Set.
 * Get a list of all Inventory Minifigs in this Set.
 */
export const legoSetsMinifigsList = <ThrowOnError extends boolean = false>(options: Options<LegoSetsMinifigsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoSetsMinifigsListResponse, LegoSetsMinifigsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/sets/{set_num}/minifigs/'
}); };

/**
 * Get a list of all Inventory Parts in this Set.
 * Get a list of all Inventory Parts in this Set.
 *
 * Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
 * Optional parameter inc_minifig_parts=1 can be used to include minifig parts in this call.
 * Optional parameter inc_color_details=0 can be used to prevent color field expansion and reduce response sizes.
 */
export const legoSetsPartsList = <ThrowOnError extends boolean = false>(options: Options<LegoSetsPartsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoSetsPartsListResponse, LegoSetsPartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/sets/{set_num}/parts/'
}); };

/**
 * Get a list of all Inventory Sets in this Set.
 * Get a list of all Inventory Sets in this Set.
 */
export const legoSetsSetsList = <ThrowOnError extends boolean = false>(options: Options<LegoSetsSetsListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoSetsSetsListResponse, LegoSetsSetsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/sets/{set_num}/sets/'
}); };

/**
 * Return all Themes
 * Return all Themes
 */
export const legoThemesList = <ThrowOnError extends boolean = false>(options?: Options<LegoThemesListData, ThrowOnError>) => { return (options?.client ?? client).get<LegoThemesListResponse, LegoThemesListError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/themes/'
}); };

/**
 * Return details for a specific Theme
 * Return details for a specific Theme
 */
export const legoThemesRead = <ThrowOnError extends boolean = false>(options: Options<LegoThemesReadData, ThrowOnError>) => { return (options?.client ?? client).get<LegoThemesReadResponse, LegoThemesReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/lego/themes/{id}/'
}); };

export const swaggerList = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SwaggerListResponse, SwaggerListError, ThrowOnError>({
    ...options,
    url: '/api/v3/swagger/'
}); };

/**
 * Generate a User Token to be used for authorising user account actions in subsequent calls. Username can be either
 * Generate a User Token to be used for authorising user account actions in subsequent calls. Username can be either
 * the actual username or the user's email address.
 */
export const usersTokenCreate = <ThrowOnError extends boolean = false>(options: Options<UsersTokenCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersTokenCreateResponse, UsersTokenCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/_token/'
}); };

/**
 * Get a list of all the available Badges
 * Get a list of all the available Badges
 */
export const usersBadgesList = <ThrowOnError extends boolean = false>(options?: Options<UsersBadgesListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersBadgesListResponse, UsersBadgesListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/badges/'
}); };

/**
 * Get details about a specific Badge
 * Get details about a specific Badge
 */
export const usersBadgesRead = <ThrowOnError extends boolean = false>(options: Options<UsersBadgesReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersBadgesReadResponse, UsersBadgesReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/badges/{id}/'
}); };

/**
 * Get a list of all the Parts in all the user's Part Lists as well as the Parts inside Sets in the user's Set Lists.
 * Get a list of all the Parts in all the user's Part Lists as well as the Parts inside Sets in the user's Set Lists.
 *
 * ###WARNING this call is very resource intensive, do not overuse it!
 *
 * Optionally, filter by one or more of the below query parameters.
 */
export const usersAllpartsList = <ThrowOnError extends boolean = false>(options: Options<UsersAllpartsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersAllpartsListResponse, UsersAllpartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/allparts/'
}); };

/**
 * Find out how many parts the user needs to build the specified Set.
 * Find out how many parts the user needs to build the specified Set.
 *
 * The user's default Build Settings will be used to calculate a Build Match % using their LEGO Collection of Sets
 * and Parts.
 */
export const usersBuildRead = <ThrowOnError extends boolean = false>(options: Options<UsersBuildReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersBuildReadResponse, UsersBuildReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/build/{set_num}/'
}); };

/**
 * Get a list of all the Lost Parts from the user's LEGO collection.
 * Get a list of all the Lost Parts from the user's LEGO collection.
 *
 * Optionally, filter by one or more of the below query parameters.
 */
export const usersLostPartsList = <ThrowOnError extends boolean = false>(options: Options<UsersLostPartsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersLostPartsListResponse, UsersLostPartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/lost_parts/'
}); };

/**
 * Add one or more Lost Parts to the user.
 * Add one or more Lost Parts to the user.
 *
 * ### Single Part
 * When adding a single Part, returns the successfully created Part (status 201) or details for why the Part could not
 * be added.
 * ### Multiple Parts
 * To add multiple Parts, POST a JSON list of them (using a Content-Type header of 'application/json'). The inv_part_id
 * field can be retrieved from the Set's inventory.
 * e.g:
 * `[{"inv_part_id": 806698, "lost_quantity": 3},
 * {"inv_part_id": 256007, "lost_quantity": 2}]`
 * Returns a list of successfully added Parts. If the Part already exists or is unrecognised, it will be skipped.
 */
export const usersLostPartsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersLostPartsCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersLostPartsCreateResponse, UsersLostPartsCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/lost_parts/'
}); };

/**
 * Remove the Lost Part from the user.
 * Remove the Lost Part from the user.
 */
export const usersLostPartsDelete = <ThrowOnError extends boolean = false>(options: Options<UsersLostPartsDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersLostPartsDeleteResponse, UsersLostPartsDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/lost_parts/{id}/'
}); };

/**
 * Get a list of all the Minifigs in all the user's Sets. Note that this is a read-only list as Minifigs are
 * Get a list of all the Minifigs in all the user's Sets. Note that this is a read-only list as Minifigs are
 * automatically determined by the Sets in the user's Set Lists.
 *
 * Minifigs that were manually added to Set Lists can be retrieved via the
 * GET /api/v3/users/{user_token}/sets/ endpoint.
 *
 * Optionally, filter by one or more of the below query parameters.
 */
export const usersMinifigsList = <ThrowOnError extends boolean = false>(options: Options<UsersMinifigsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersMinifigsListResponse, UsersMinifigsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/minifigs/'
}); };

/**
 * Get a list of all the user's Part Lists.
 * Get a list of all the user's Part Lists.
 */
export const usersPartlistsList = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersPartlistsListResponse, UsersPartlistsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/'
}); };

/**
 * Add a new Part List.
 * Add a new Part List.
 */
export const usersPartlistsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersPartlistsCreateResponse, UsersPartlistsCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/'
}); };

/**
 * Get details about a specific Part List.
 * Get details about a specific Part List.
 */
export const usersPartlistsRead = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersPartlistsReadResponse, UsersPartlistsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/'
}); };

/**
 * Replace an existing Part List's details.
 * Replace an existing Part List's details.
 */
export const usersPartlistsUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<UsersPartlistsUpdateResponse, UsersPartlistsUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/'
}); };

/**
 * Update an existing Part List's details.
 * Update an existing Part List's details.
 */
export const usersPartlistsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsPartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersPartlistsPartialUpdateResponse, UsersPartlistsPartialUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/'
}); };

/**
 * Delete a Part List and all it's Parts.
 * Delete a Part List and all it's Parts.
 */
export const usersPartlistsDelete = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersPartlistsDeleteResponse, UsersPartlistsDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/'
}); };

/**
 * Get a list of all the Parts in a specific Part List.
 * Get a list of all the Parts in a specific Part List.
 *
 * Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
 * Optional parameter inc_color_details=0 can be used to prevent color field expansion and reduce response sizes.
 */
export const usersPartlistsPartsList = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsPartsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersPartlistsPartsListResponse, UsersPartlistsPartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/parts/'
}); };

/**
 * Add one or more Parts to the Part List.
 * Add one or more Parts to the Part List.
 *
 * ### Single Part
 * When adding a single Part, returns the successfully created Part (status 201) or details for why the Part could not
 * be added.
 * ### Multiple Parts
 * To add multiple Parts, POST a JSON list of them (using a Content-Type header of 'application/json').
 * e.g:
 * `[{"part_num":"3001", "color_id": 1, "quantity": 10},
 * {"part_num":"3001", "color_id": 2, "quantity": 20},
 * {"part_num":"3002", "color_id": 14, "quantity": 30}]`
 * Returns a list of successfully added Parts. If the Part already exists or is unrecognised, it will be skipped.
 */
export const usersPartlistsPartsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsPartsCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersPartlistsPartsCreateResponse, UsersPartlistsPartsCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/parts/'
}); };

/**
 * Get details about a specific Part in the Part List.
 * Get details about a specific Part in the Part List.
 */
export const usersPartlistsPartsRead = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsPartsReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersPartlistsPartsReadResponse, UsersPartlistsPartsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/parts/{part_num}/{color_id}/'
}); };

/**
 * Replace an existing Part's details in the Part List.
 * Replace an existing Part's details in the Part List.
 */
export const usersPartlistsPartsUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsPartsUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<UsersPartlistsPartsUpdateResponse, UsersPartlistsPartsUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/parts/{part_num}/{color_id}/'
}); };

/**
 * Delete a Part from the Part List.
 * Delete a Part from the Part List.
 */
export const usersPartlistsPartsDelete = <ThrowOnError extends boolean = false>(options: Options<UsersPartlistsPartsDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersPartlistsPartsDeleteResponse, UsersPartlistsPartsDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/partlists/{list_id}/parts/{part_num}/{color_id}/'
}); };

/**
 * Get a list of all the Parts in all the user's Part Lists.
 * Get a list of all the Parts in all the user's Part Lists.
 *
 * Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
 *
 * ###Set List logic
 * Parts appearing in multiple Part Lists will be listed multiple times.
 *
 * Optionally, filter by one or more of the below query parameters.
 */
export const usersPartsList = <ThrowOnError extends boolean = false>(options: Options<UsersPartsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersPartsListResponse, UsersPartsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/parts/'
}); };

/**
 * Get details about a specific user.
 * Get details about a specific user.
 */
export const usersProfileRead = <ThrowOnError extends boolean = false>(options: Options<UsersProfileReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersProfileReadResponse, UsersProfileReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/profile/'
}); };

/**
 * Get a list of all the user's Set Lists.
 * Get a list of all the user's Set Lists.
 */
export const usersSetlistsList = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersSetlistsListResponse, UsersSetlistsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/'
}); };

/**
 * Add a new Set List.
 * Add a new Set List.
 */
export const usersSetlistsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersSetlistsCreateResponse, UsersSetlistsCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/'
}); };

/**
 * Get details about a specific Set List.
 * Get details about a specific Set List.
 */
export const usersSetlistsRead = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersSetlistsReadResponse, UsersSetlistsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/'
}); };

/**
 * Replace an existing Set List's details.
 * Replace an existing Set List's details.
 */
export const usersSetlistsUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<UsersSetlistsUpdateResponse, UsersSetlistsUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/'
}); };

/**
 * Update an existing Set List's details.
 * Update an existing Set List's details.
 */
export const usersSetlistsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsPartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersSetlistsPartialUpdateResponse, UsersSetlistsPartialUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/'
}); };

/**
 * Delete a Set List and all it's Sets.
 * Delete a Set List and all it's Sets.
 */
export const usersSetlistsDelete = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersSetlistsDeleteResponse, UsersSetlistsDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/'
}); };

/**
 * Get a list of all the Sets in a specific Set List.
 * Get a list of all the Sets in a specific Set List.
 */
export const usersSetlistsSetsList = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsSetsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersSetlistsSetsListResponse, UsersSetlistsSetsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/sets/'
}); };

/**
 * Add one or more Sets to the Set List. Existing Sets are unaffected.
 * Add one or more Sets to the Set List. Existing Sets are unaffected.
 *
 * ### Single Set
 * When adding a single Set, returns the successfully created Set (status 201) or details for why the Set could not
 * be added.
 * ### Multiple Sets
 * To add multiple Sets, POST a JSON list of them (using a Content-Type header of 'application/json').
 * e.g:
 * `[{"set_num":"8043-1", "quantity": 1},
 * {"set_num":"8110-1", "quantity": 2, "include_spares": "False"}]`
 * Returns a list of successfully added Sets. If the Set already exists or is unrecognised, it will be skipped.
 */
export const usersSetlistsSetsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsSetsCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersSetlistsSetsCreateResponse, UsersSetlistsSetsCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/sets/'
}); };

/**
 * Get details about a specific Set in the Set List.
 * Get details about a specific Set in the Set List.
 */
export const usersSetlistsSetsRead = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsSetsReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersSetlistsSetsReadResponse, UsersSetlistsSetsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/sets/{set_num}/'
}); };

/**
 * Replace an existing Set's details in the Set List.
 * Replace an existing Set's details in the Set List.
 */
export const usersSetlistsSetsUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsSetsUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<UsersSetlistsSetsUpdateResponse, UsersSetlistsSetsUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/sets/{set_num}/'
}); };

/**
 * Update an existing Set's details in the Set List.
 * Update an existing Set's details in the Set List.
 */
export const usersSetlistsSetsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsSetsPartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersSetlistsSetsPartialUpdateResponse, UsersSetlistsSetsPartialUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/sets/{set_num}/'
}); };

/**
 * Delete a Set from the Set List.
 * Delete a Set from the Set List.
 */
export const usersSetlistsSetsDelete = <ThrowOnError extends boolean = false>(options: Options<UsersSetlistsSetsDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersSetlistsSetsDeleteResponse, UsersSetlistsSetsDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/setlists/{list_id}/sets/{set_num}/'
}); };

/**
 * Get a list of all the Sets in the user's LEGO collection.
 * Get a list of all the Sets in the user's LEGO collection.
 *
 * ### Set List logic
 * Sets appearing in multiple Set Lists will be listed multiple times.
 *
 * Optionally, filter by one or more of the below query parameters.
 */
export const usersSetsList = <ThrowOnError extends boolean = false>(options: Options<UsersSetsListData, ThrowOnError>) => { return (options?.client ?? client).get<UsersSetsListResponse, UsersSetsListError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/sets/'
}); };

/**
 * Add one or more Sets to the user's LEGO collection. Existing Sets are unaffected.
 * Add one or more Sets to the user's LEGO collection. Existing Sets are unaffected.
 *
 * ### Set List logic
 * The Set List used when adding sets is chosen in the following order:
 * 1. If no Set Lists exist, one will be created and used
 * 2. User's configured default Set List for Imports
 * 3. The first Set List alphabetically
 *
 * ### Single Set
 * When adding a single Set, returns the successfully created Set (status 201) or details for why the Set could not
 * be added.
 * ### Multiple Sets
 * To add multiple Sets, POST a JSON list of them (using a Content-Type header of 'application/json').
 * e.g:
 * `[{"set_num":"8043-1", "quantity": 1},
 * {"set_num":"8110-1", "quantity": 2, "include_spares": "False"}]`
 * Returns a list of successfully added Sets. If the Set already exists or is unrecognised, it will be skipped.
 */
export const usersSetsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersSetsCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersSetsCreateResponse, UsersSetsCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/sets/'
}); };

/**
 * Synchronise a user's Sets to the POSTed list.
 * Synchronise a user's Sets to the POSTed list.
 *
 * ### Set List logic
 * This is used to completely replace the user's Sets with those in the supplied list.
 * It will remove any Sets in Rebrickable that are not found in the supplied list.
 * It will attempt to keep any current Rebrickable Sets in their existing Set Lists, and will add any new Sets
 * found into the Default Set List for Imports in the user's settings.
 * ### Single Set
 * When adding a single Set, returns the successfully created Set (status 201) or details for why the Set could not
 * be added.
 * ### Multiple Sets
 * To add multiple Sets, POST a JSON list of them (using a Content-Type header of 'application/json').
 * e.g:
 * `[{"set_num":"8043-1", "quantity": 1},
 * {"set_num":"8110-1", "quantity": 2, "include_spares": "False"}]`
 * Returns a list of successfully added Sets. If the Set is unrecognised, it will be skipped.
 */
export const usersSetsSyncCreate = <ThrowOnError extends boolean = false>(options: Options<UsersSetsSyncCreateData, ThrowOnError>) => { return (options?.client ?? client).post<UsersSetsSyncCreateResponse, UsersSetsSyncCreateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/sets/sync/'
}); };

/**
 * Get details about a specific Set in the user's LEGO collection.
 * Get details about a specific Set in the user's LEGO collection.
 *
 * ### Set List logic
 * Because this merges sets found across all Set Lists the fields list_id and include_spares may not be
 * accurate unless the Set actually only exists in a single Set List.
 */
export const usersSetsRead = <ThrowOnError extends boolean = false>(options: Options<UsersSetsReadData, ThrowOnError>) => { return (options?.client ?? client).get<UsersSetsReadResponse, UsersSetsReadError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/sets/{set_num}/'
}); };

/**
 * Update an existing Set's quantity in all Set Lists. This PUT call is different to others in that it will create
 * Update an existing Set's quantity in all Set Lists. This PUT call is different to others in that it will create
 * the Set if it doesn't already exist, and it will delete the Set if you pass a quantity of 0.
 *
 * ### Set List logic
 * * Default Set List = user's configured default import list or the first alphabetically if none exist.
 * * Increasing quantity = add to Set in default Set List if it exists, else add it there
 * * Decreasing quantity = remove from Set in default Set List first, then from remaining lists until done
 */
export const usersSetsUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersSetsUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<UsersSetsUpdateResponse, UsersSetsUpdateError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/sets/{set_num}/'
}); };

/**
 * Delete the Set from all the user's Set Lists.
 * Delete the Set from all the user's Set Lists.
 */
export const usersSetsDelete = <ThrowOnError extends boolean = false>(options: Options<UsersSetsDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersSetsDeleteResponse, UsersSetsDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v3/users/{user_token}/sets/{set_num}/'
}); };